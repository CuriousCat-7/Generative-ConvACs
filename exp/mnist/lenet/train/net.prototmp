
# Number of iterations between tests
test_interval: 500
# Covering the full 10,000 testing and 40,000 training images.
test_iter: 100
test_state: { stage: "test-on-test-set" }
test_iter: 500
test_state: { stage: "test-on-train-set" }
base_lr: {{ base_lr }}
momentum: {{ momentum }}

# The learning rate policy
lr_policy: "inv"
gamma: 0.0001
power: 0.75

# Display every 100 iterations
display: 20
# The maximum number of iterations
max_iter: {{ max_iter }}
# snapshot intermediate results
snapshot: 5000
snapshot_prefix: "{{ name }}"
# solver mode: CPU or GPU
solver_mode: GPU
type: "{{ solver_type }}"
debug_info: false

net_param {
    name: "{{ name }}"
    ##############
    ### Source ###
    ##############

   layer {
        name: "mnist_labeled"
        type: "ImageData"
        top: "data"
        top: "label"
        image_data_param {
            source: "data/mnist_train_image_data/index.txt"
            root_folder: "data/mnist_train_image_data/"
            batch_size: {{ labeled_batch | int }}
            shuffle: true
            is_color: false
        }
        transform_param {
            scale: 0.00390625
        }
        include: { 
            phase: TRAIN 
        }
    }



    layer {
        name: "mnist"
        type: "ImageData"
        top: "data"
        top: "label"
        image_data_param {
            source: "data/mnist_test_image_data/index.txt"
            root_folder: "data/mnist_test_image_data/"
            batch_size: 100
            is_color: false
        }
        transform_param {
            scale: 0.00390625
        }  
        include: { 
            phase: TEST 
            stage: "test-on-test-set"
        }
    }
    layer {
        name: "mnist"
        type: "ImageData"
        top: "data"
        top: "label"
        image_data_param {
            source: "data/mnist_train_image_data/index.txt"
            root_folder: "data/mnist_train_image_data/"
            batch_size: 100
            shuffle: true
            is_color: false
        }
        transform_param {
            scale: 0.00390625
        }
        include: { 
            phase: TEST 
            stage: "test-on-train-set"
        }
    }

    layer {
      name: "conv1"
      type: "Convolution"
      bottom: "data"
      top: "conv1"
      param {
        lr_mult: 1
      }
      param {
        lr_mult: 2
      }
      convolution_param {
        num_output: 20
        kernel_size: 5
        stride: 1
        weight_filler {
          type: "xavier"
        }
        bias_filler {
          type: "constant"
        }
      }
    }
    layer {
      name: "pool1"
      type: "Pooling"
      bottom: "conv1"
      top: "pool1"
      pooling_param {
        pool: MAX
        kernel_size: 2
        stride: 2
      }
    }
    layer {
      name: "conv2"
      type: "Convolution"
      bottom: "pool1"
      top: "conv2"
      param {
        lr_mult: 1
      }
      param {
        lr_mult: 2
      }
      convolution_param {
        num_output: 50
        kernel_size: 5
        stride: 1
        weight_filler {
          type: "xavier"
        }
        bias_filler {
          type: "constant"
        }
      }
    }
    layer {
      name: "pool2"
      type: "Pooling"
      bottom: "conv2"
      top: "pool2"
      pooling_param {
        pool: MAX
        kernel_size: 2
        stride: 2
      }
    }
    layer {
      name: "ip1"
      type: "InnerProduct"
      bottom: "pool2"
      top: "ip1"
      param {
        lr_mult: 1
      }
      param {
        lr_mult: 2
      }
      inner_product_param {
        num_output: 500
        weight_filler {
          type: "xavier"
        }
        bias_filler {
          type: "constant"
        }
      }
    }
    layer {
      name: "relu1"
      type: "ReLU"
      bottom: "ip1"
      top: "ip1"
    }
    layer {
      name: "ip2"
      type: "InnerProduct"
      bottom: "ip1"
      top: "ip2"
      param {
        lr_mult: 1
      }
      param {
        lr_mult: 2
      }
      inner_product_param {
        num_output: 10
        weight_filler {
          type: "xavier"
        }
        bias_filler {
          type: "constant"
        }
      }
    }
    layer {
      name: "accuracy"
      type: "Accuracy"
      bottom: "ip2"
      bottom: "label"
      top: "accuracy"
      include {
        phase: TEST
      }
    }
    layer {
      name: "loss"
      type: "SoftmaxWithLoss"
      bottom: "ip2"
      bottom: "label"
      top: "loss"
    }


    
}
